pipeline {
    agent any
    
    stages {
        stage ('Build') {

            stage('Clone git') {
                steps { git 'https://github.com/cmelgreen/PersonalSite' }
            }

            parallel {

                stage('Frontend') {
                    agent { docker { image 'node:latest' } }

                    stage('Install') {
                        dir('frontend') {
                            steps { sh 'make install' }
                        }
                    }
                    
                    stage('Build') { 
                        dir('frontend') {
                            steps { sh 'make build' }
                        }
                    }
                }
            
                stage('Backend') {
                    agent { docker { image 'golang:latest' } }

                    environment { GOCACHE = "${WORKSPACE}" }

                    stage('Install') {
                        dir('backend') {
                            steps { sh 'make install' }
                        }
                    }

                    stage('Build') { 
                        dir('backend') {
                            steps { sh 'make build' }
                        }
                    }
                }
            }
        }
    }
    
    post ('Deploy') {
        success {
            step([
                $class: 'AWSCodeDeployPublisher', 
                applicationName: 'server_cd_app', 
                awsAccessKey: '', 
                awsSecretKey: '', 
                deploymentGroupAppspec: false, 
                deploymentGroupName: 'server_cd_group', 
                deploymentMethod: 'deploy', 
                excludes: '', 
                iamRoleArn: '', 
                includes: '**', 
                proxyHost: '', 
                proxyPort: 0,
                region: 'us-west-2', 
                s3bucket: 'server-s3-bucket', 
                s3prefix: '', 
                subdirectory: '', 
                versionFileName: '', 
                waitForCompletion: false
            ])
        }
    }
}
